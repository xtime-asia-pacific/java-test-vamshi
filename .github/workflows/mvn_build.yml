name: Maven build

on:
  workflow_dispatch:
    inputs:
      build-mode:
        description: 'Enter build mode: build | deploy'
        required: true
        type: string
        default: 'build'
  push:
    branches:
      - 'feature'

jobs:
  prebuild:
    outputs:
      mvn-build-phases-args: ${{ steps.mvn-build-params.outputs.phases_args }}
    name: "Prebuild"
    runs-on: ubuntu-latest
    steps:
      - name: Generate Maven Build Parameters
        id: mvn-build-params
        run: |
          mode="${{ github.event.inputs.build-mode }}"
          if [[ "${{ github.event_name }}" == 'push' ]]; then
            mode="deploy"
          fi
          case "$mode" in
            build)
              deploy_args="clean package"
              ;;
            deploy)
              deploy_args="-Dmaven.test.skip=true -DBUILD_NUMBER=${{ github.run_number }} clean package"
              ;;
            *)
              echo "Invalid mode selected: $mode"
              exit 1
              ;;
          esac
          echo "phases_args=$deploy_args" >> "$GITHUB_OUTPUT"

  build:
    name: "Build WAR"
    needs: prebuild
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Java 21 (AWS Corretto)
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          cache: 'maven'

      - name: Version Validations
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          java -version
          mvn -version

      - name: Run Maven Build
        run: |
          mvn ${{ needs.prebuild.outputs.mvn-build-phases-args }}
          ls -lart

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: war-and-runner
          path: |
            target/*.war
            target/dependency/webapp-runner.jar

  imagecreation:
    name: "Generating DockerImage"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download WAR and Runner JAR
        uses: actions/download-artifact@v4
        with:
          name: war-and-runner
          path: target

      - name: Create Docker Network
        run: docker network create app-network

      - name: Start MySQL Container
        run: |
          docker run -d \
            --name mysql-db \
            --network app-network \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=onlinebookstore \
            mysql:8

      - name: Wait for MySQL to Accept Connections
        run: |
          for i in {1..15}; do
            echo "Checking MySQL (attempt $i)..."
            docker exec mysql-db mysql -uroot -proot -e "SELECT 1;" && break
            sleep 5
          done

      - name: Execute SQL Script
        run: |
          docker cp sqlscript.sql mysql-db:/sqlscript.sql
          docker exec mysql-db sh -c 'mysql -uroot -proot onlinebookstore < /sqlscript.sql'

      - name: Create Dockerfile
        run: |
          cat <<EOF > Dockerfile
          FROM eclipse-temurin:21-jdk

          WORKDIR /app

          COPY target/dependency/webapp-runner.jar webapp-runner.jar
          COPY target/*.war app.war

          EXPOSE 8080

          CMD ["java", "-Ddb.driver=com.mysql.cj.jdbc.Driver", "-Ddb.host=jdbc:mysql://mysql-db:3306/onlinebookstore", "-Ddb.username=root", "-Ddb.password=root", "-jar", "webapp-runner.jar", "app.war"]
          EOF

      - name: Build Docker Image
        run: docker build -t java-test-vamshi/testimage:${{ github.run_number }} .

      - name: Run App Container
        run: |
          docker run -d \
            --name testcontainer \
            --network app-network \
            -p 8080:8080 \
            java-test-vamshi/testimage:${{ github.run_number }}

      - name: Wait for App to Start
        run: sleep 15

      - name: Test App Running
        run: |
          curl -I http://localhost:8080/onlinebookstore/ || echo "App is not responding"
